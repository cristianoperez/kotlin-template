version: 2

jobs:
  test_app:
    docker:
      - image: circleci/openjdk:11-jdk-stretch-node-browsers
      - image: postgres:11.3-alpine
        environment:
          POSTGRES_DB: kotlin_spring_sample_test

    parallelism: 2
    working_directory: ~/kotlin-spring-sample

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle.kts" }}
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle.kts" }}

      - run:
          name: Run tests
          command: gradle test -i

      - run:
          name: Run lint
          command: |
            gradle detektCheck

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml"
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

release:
  docker:
    - image: circleci/openjdk:11-jdk
      environment:
        EMAIL: dev@creditas.com.br
        GIT_AUTHOR_NAME: developer
        GIT_COMMITTER_NAME: developer

  working_directory: ~/kotlin-spring-sample

  steps:
    - checkout
    - run:
        name: Release
        command: gradle release -Prelease.useAutomaticVersion=true -x test

build_push_deploy_stg:
  docker:
    - image: 794670448117.dkr.ecr.us-east-1.amazonaws.com/ecs-deploy:latest
      environment:
        AWS_DEFAULT_REGION: 'us-east-1'
        REPOSITORY: '794670448117.dkr.ecr.us-east-1.amazonaws.com/kotlin-spring-sample'
        CLUSTER: kotlin-spring-sample
        SERVICE: kotlin-spring-sample
        TASK: kotlin-spring-sample
  steps:
    - checkout
    - setup_remote_docker

    - run:
        name: Build image
        command: docker build -t ${REPOSITORY}:latest .

    - run:
        name: set TAG variable
        command: |
          echo 'export TAG=$(git describe --abbrev=0 --tags)' | tee $BASH_ENV

    - run:
        name: Docker tag
        command: docker tag ${REPOSITORY} ${REPOSITORY}:$TAG

    - run:
        name: Login to ECR
        command: |
          $(aws ecr get-login --no-include-email --region us-east-1)
    - run:
        name: Push image to ECR
        command: docker push ${REPOSITORY}

    - run:
        name: deploy
        command: |
          ecs deploy $CLUSTER $SERVICE -i $TASK $IMAGE_NAME --timeout 500

workflows:
  version: 2
  run_pipeline:
    jobs:
      - test_app
      - release:
          requires:
            - test_app
          filters:
            branches:
              only:
                - staging
      - build_push_deploy_stg:
          requires:
            - release
          filters:
            branches:
              only:
                - staging

