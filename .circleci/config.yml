version: 2.1

orbs:
   docker: circleci/docker@0.5.13

jobs:
  test_app:
    docker:
      - image: circleci/openjdk:11-jdk-stretch-node-browsers
      - image: postgres:11.3-alpine
        environment:
          POSTGRES_DB: kotlin_spring_sample_test

    parallelism: 2
    working_directory: ~/kotlin-spring-sample

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle.kts" }}
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle.kts" }}

      - run:
          name: Run tests
          command: gradle test -i

      - run:
          name: Run lint
          command: |
            gradle detekt

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml"
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

  build_push_deploy_stg:
    docker:
      - image: 794670448117.dkr.ecr.us-east-1.amazonaws.com/ecs-deploy:1.0.0
        environment:
          AWS_DEFAULT_REGION: 'us-east-1'
          REPOSITORY: '794670448117.dkr.ecr.us-east-1.amazonaws.com/kotlin-spring-sample'
          CLUSTER: kotlin-spring-sample
          SERVICE: kotlin-spring-sample
          TASK: kotlin-spring-sample
          TASK_MIGRATION: kotlin-spring-sample-migration
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Login on ECR
          command: |
            aws ecr get-login --no-include-email | sh
            echo "export IMAGE_NAME=\"${REPOSITORY}:$(git rev-parse --short $CIRCLE_SHA1)\"" | tee "${BASH_ENV}"
            echo "export IMAGE_NAME_LATEST=\"${REPOSITORY}:latest\"" | tee -a "${BASH_ENV}"
      - run:
          name: build image
          command: |
            docker build -t $IMAGE_NAME -t $IMAGE_NAME_LATEST .
      - run:
          name: push to ECR
          command: |
            docker push $REPOSITORY
      - run:
          name: Migrations
          command: |
            pip install ecs-task-run
            ecs-task-run --cluster $CLUSTER --task $TASK_MIGRATION --image $IMAGE_NAME
      - run:
          name: deploy
          command: |
            ecs deploy $CLUSTER $SERVICE -i $TASK $IMAGE_NAME --timeout 500

  build_push_deploy_prod:
    docker:
      - image: 489963411341.dkr.ecr.us-east-1.amazonaws.com/ecs-deploy:1.0.0
        environment:
          AWS_DEFAULT_REGION: 'us-east-1'
          REPOSITORY: '489963411341.dkr.ecr.us-east-1.amazonaws.com/kotlin-spring-sample'
          CLUSTER: kotlin-spring-sample
          SERVICE: kotlin-spring-sample
          TASK: kotlin-spring-sample
          TASK_MIGRATION: kotlin-spring-sample-migration
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Login on ECR
          command: |
            aws ecr get-login --no-include-email | sh
            echo "export IMAGE_NAME=\"${REPOSITORY}:$(git rev-parse --short $CIRCLE_SHA1)\"" | tee "${BASH_ENV}"
            echo "export IMAGE_NAME_LATEST=\"${REPOSITORY}:latest\"" | tee -a "${BASH_ENV}"
      - run:
          name: build image
          command: |
            docker build \
            -t $IMAGE_NAME -t $IMAGE_NAME_LATEST --cache-from ${REPOSITORY}:latest .
      - run:
          name: push to ECR
          command: |
            docker push $REPOSITORY
      - run:
          name: Migrations
          command: |
            pip install ecs-task-run
            ecs-task-run --cluster $CLUSTER --task $TASK_MIGRATION --image $IMAGE_NAME
      - run:
          name: deploy
          command: |
            ecs deploy $CLUSTER $SERVICE -i $TASK $IMAGE_NAME --timeout 500

workflows:
  version: 2.1
  lint:
    jobs:
      - docker/hadolint:
          artifacts-path: '/tmp/artifacts'
          ignore-rules: 'DL3018,DL3008'
          trusted-registries: 'docker.io,794670448117.dkr.ecr.us-east-1.amazonaws.com'
  run_pipeline:
    jobs:
      - test_app
      - build_push_deploy_stg:
          requires:
            - test_app
          filters:
            branches:
              only:
                - staging
          context: deploy-stg
      - build_push_deploy_prod:
          requires:
            - test_app
          filters:
            branches:
              only:
                - master
          context: deploy-prod
